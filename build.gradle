plugins {
    id 'java'
    id 'war'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    //id 'org.graalvm.buildtools.native' version '0.10.6'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

ext {
    compilerVersion = "5.6.3"
}

apply from: "$rootDir/gradle/versioning.gradle"
apply from: "$rootDir/gradle/docker.gradle"

group = 'io.github.sogis'

version = "${compilerVersion}-${buildNumber}"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

repositories {
    mavenCentral()
    maven { url "https://jars.sogeo.services" }  
    maven { url "https://jars.interlis.ch" }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    implementation "ch.interlis:ili2c-core:${compilerVersion}"
    implementation "ch.interlis:ili2c-tool:${compilerVersion}"
    implementation 'ch.ehi:ehibasics:1.4.1'
    implementation 'ch.interlis:iox-ili:1.23.4'
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

javadoc.failOnError = false
tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.web
            artifact jar
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "ili2c-web-service"
                url = "https://github.com/edigonzales/ili2c-web-service"
                description = "ili2c-web-service"
                scm {
                    connection = "scm:git:https@github.com/edigonzales/ili2c-web-service"
                    developerConnection = "scm:git:https@github.com/edigonzales/ili2c-web-service"
                    url = "https://github.com/edigonzales/ili2c-web-service"
                }
                licenses {
                    license {
                        name = "MIT"
                        url = "https://github.com/edigonzales/ili2c-web-service/blob/master/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = "edigonzales"
                        name = "Stefan Ziegler"
                    }
                }
            }
        }
    }
}

if (System.getProperty('release') != null) {
//if (true) {
    signing {
        sign publishing.publications.mavenJava
    }
}

nexusPublishing {
    repositories {
        sonatype { 
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = findProperty("ossrhUsername") ?: System.getenv("OSSRH_USERNAME")
            password = findProperty("ossrhPassword") ?: System.getenv("OSSRH_PASSWORD")
        }
    }
}


