tasks.register('copyWar', Copy) {
    dependsOn 'bootWar'
    from file("$buildDir/libs/ili2c-web-service-${compilerVersion}-${buildNumber}-plain.war")
    into file("$projectDir/docker/image/tmp")
}

// tasks.register('buildNativeDockerImage', Exec) {
//     dependsOn 'copyNativeImage'
//     def githash = getCheckedOutGitCommitHash()
//     def build_timestamp = getTimestamp()

//     workingDir "$projectDir/docker/image"
//     commandLine 'docker', 'build',
//                 '--no-cache', '--force-rm',
//                 '-t', "sogis/datahub:latest",
//                 '-f', 'Dockerfile.alpine',  '.'
// }

// Wird sich noch Ã¤ndern, wenn wir Docker-Image testen wollen.

tasks.register('buildAndPushMultiArchImage', Exec) {
    dependsOn 'copyWar'
    def githash = getCheckedOutGitCommitHash()
    def build_timestamp = getTimestamp()

    // TODO add ghcr.io 
    workingDir "$projectDir/docker/image"
    commandLine 'docker', 'buildx', 'build',
                '--platform', 'linux/amd64,linux/arm64',
                '-t', "sogis/ili2c-web-service:0",
                '-t', "sogis/ili2c-web-service:0.0",
                '-t', "sogis/ili2c-web-service:0.0.$buildNumber",
                '-t', "sogis/ili2c-web-service:latest",
                '--label', "ili2c-web-service.created=$build_timestamp", 
                '--label', "ili2c-web-service.git_commit=$githash",
                '--label', "ili2c-web-service.version=$version",
                '-f', 'Dockerfile',  '.', '--push'
                //'-f', 'Dockerfile',  '.'
}

def getCheckedOutGitCommitHash() {
    'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}